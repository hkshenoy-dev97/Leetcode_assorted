class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n=nums1.size();
        int m=nums2.size();
        
        if(n>m){
            return findMedianSortedArrays(nums2,nums1);
        }
        
        
        int req_size=(n+m+1)/2;
        int tot_size=n+m;
        int lo=0;
        int hi=n;
        
        while(hi>=lo){
           // cout<<hi<<" "<<lo<<" ";
            int mid=(hi+lo)/2;
            
            int part_x=mid;
            int part_y=req_size-mid;
            
            //cout<<part_x<<" "<<part_y<<" ";
            int part1_left_max=(part_x == 0 ) ? INT_MIN : nums1[part_x-1];
            int part1_right_min=(part_x >= n) ? INT_MAX : nums1[part_x];
            int part2_left_max=(part_y == 0 ) ? INT_MIN : nums2[part_y-1];
            int part2_right_min=(part_y >= m) ? INT_MAX : nums2[part_y];
            
           // cout<<part1_left_max<<" "<<part1_right_min<<" "<<part2_left_max<<" "<<part2_right_min<<endl;
         
            if(part1_left_max <= part2_right_min and part2_left_max<=part1_right_min){
                if(tot_size % 2){
                    return max(part1_left_max,part2_left_max);
                }else{
                    double s=max(part1_left_max,part2_left_max)+min(part1_right_min,part2_right_min);
                    //cout<<s<<endl;
                    return s/2.00;
                }
                    
            }else if(part1_left_max > part2_right_min){
                hi=mid-1;
            }else{
                lo=mid+1;
            }
        }
        return 0.00;
    }
};
