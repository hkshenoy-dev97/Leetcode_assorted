// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000

// Tree Node
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};

int largestBst(Node *root);

// Function to Build Tree
Node* buildTree(string str)
{
   // Corner Case
   if(str.length() == 0 || str[0] == 'N')
       return NULL;

   // Creating vector of strings from input
   // string after spliting by space
   vector<string> ip;

   istringstream iss(str);
   for(string str; iss >> str; )
       ip.push_back(str);

   // Create the root of the tree
   Node* root = new Node(stoi(ip[0]));

   // Push the root to the queue
   queue<Node*> queue;
   queue.push(root);

   // Starting from the second element
   int i = 1;
   while(!queue.empty() && i < ip.size()) {

       // Get and remove the front of the queue
       Node* currNode = queue.front();
       queue.pop();

       // Get the current node's value from the string
       string currVal = ip[i];

       // If the left child is not null
       if(currVal != "N") {

           // Create the left child for the current node
           currNode->left = new Node(stoi(currVal));

           // Push it to the queue
           queue.push(currNode->left);
       }

       // For the right child
       i++;
       if(i >= ip.size())
           break;
       currVal = ip[i];

       // If the right child is not null
       if(currVal != "N") {

           // Create the right child for the current node
           currNode->right = new Node(stoi(currVal));

           // Push it to the queue
           queue.push(currNode->right);
       }
       i++;
   }

   return root;
}



int main() {
  
   int t;
   string tc;
   getline(cin, tc);
   t=stoi(tc);
   while(t--)
   {
        string s; 
       getline(cin, s);
       Node* root1 = buildTree(s);

       //getline(cin, s);
      // int k = stoi(s);
       // getline(cin, s);

       cout << largestBst(root1);
        cout << endl;
       //cout<<"~"<<endl;
   }
   return 0;
}// } Driver Code Ends


/* Tree node structure  used in the program

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};*/

/*You are required to complete this method */
// Return the size of the largest sub-tree which is also a BST

vector<int> search(Node *root){
    
    vector<int> sol(4,0);
    if(root){
        vector<int> l,r;
        
        int v=root->data;
        if(root->right)r=search(root->right);
        if(root->left)l=search(root->left);
        
        int f_l=1;
        int f_r=1;
        
        if(l.size()>0 and (l[0]==0 or l[3]>v))f_l=0;
        if(r.size()>0 and (r[0]==0 or r[2]<v))f_r=0;
        
        if(f_l==0 or f_r==0){
            sol[0]=1;
            sol[1]=max(l[1],r[1])+1;
            sol[2]=-1;
            sol[3]=-1;
        }else{
            int sz=0,mi=v,ma=v;
            if(l.size())sz+=l[1],mi=min(mi,l[2]);
            if(r.size())sz+=r[1],ma=max(ma,r[3]);
            
            sol[0]=1;
            sol[1]=sz+1;
            sol[2]=mi;
            sol[3]=ma;
        }
    }
        
    return sol;
        
}
    
int largestBst(Node *root)
{
	//Your code here
	vector<int> sol;
	if(root){
	    sol=search(root);
	    return sol[0];
	}
	
	return 0;
}
