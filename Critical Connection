class Solution {
public:
    
    vector< vector<int> >adj;
    vector<int> vis,tin,low;
    vector< vector<int> > bridges;
    int timer=1;
    
    void dfs(int v,int p){
        
        tin[v]=timer;
        low[v]=timer;
        vis[v]=1;
        
        timer++;
        
        for(auto to:adj[v]){
            if(to == p)continue;
            if(vis[to] == 1)low[v]=min(low[v],tin[to]);
            else{
                dfs(to,v);
                low[v]=min(low[v],low[to]);
                
                if(low[to] > tin[v]){
                    bridges.push_back({v,to});
                }
            }
        }
    }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        
        adj.resize(n);
        vis.resize(n,0);
        tin.resize(n,0);
        low.resize(n,0);
        
        int m=connections.size();
        
        //getting graph in adj vector form
        for(int i=0;i<m;i++){
            int x=connections[i][0];
            int y=connections[i][1];
            
            adj[x].push_back(y);
            adj[y].push_back(x);
        }
        
        
        dfs(0,-1);
        
        
        
        return bridges;
        
    }
};
