class Solution {
public:
    vector<int> adj[100005];
    vector< vector<int> > sol;
    int disc[100005];
    int low[100005];
    int vis[100005];
    int time=1;
    void dfs(int v,int p){
        
        
        vis[v]=1;
        disc[v]=time;
        low[v]=time;
        time++;
        
        
        for(auto to:adj[v]){
            if(to==p)continue;
            
            if(vis[to]==1){
                low[v]=min(low[v],disc[to]);
            }else{
                dfs(to,v);
                low[v]=min(low[v],low[to]);
                if(low[to] > disc[v]){
                    sol.push_back({v,to});
                }
            }
           
        }
    }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        for(auto it:connections){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        dfs(0,-1);
        return sol;
        
    }
};
