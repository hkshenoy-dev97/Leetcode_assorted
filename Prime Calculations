
vector<int> get_spf(){
    vector<int> spf(1000006,0);
    spf[1]=1;
    for(int i=2;i<=1000000;i++){
        if(spf[i]==0){
            for(int j=i;j<=1000000;j+=i)if(!spf[j])spf[j]=i;
        }
    }
    return spf;
}
vector<int> spf;
int get_prime_fact(int n){
    map<int,int> help;
    while(n>1){
        
        help[spf[n]]++;
        n/=spf[n];
    }
    int res=help.size()+1;
    
    return res;
}
int Solution::solve(vector<int> &A, int B) {
    int n=A.size();
    spf=get_spf();
    
    vector<int> c(n);
    for(int i=0;i<n;i++)c[i]=get_prime_fact(A[i]);
    
    int ans=0;
    int mod=1e9+7;
    
    deque<int> dq;
    for(int i=0;i<B;i++){
        while(dq.size() and c[i]>c[dq.back()]) dq.pop_back();
        dq.push_back(i);
    }
    for(int i=B;i<n;i++){
        ans=ans+A[dq.front()];
        if(ans>=mod)ans-=mod;
        
        while(dq.size() and c[i]>c[dq.back()]) dq.pop_back();
        
        while(dq.size() and dq.front() <= i-B)dq.pop_front();
        
        dq.push_back(i);
        
    }
    ans=ans+A[dq.front()];
    if(ans>=mod)ans-=mod;
    return ans;
    
    
}
